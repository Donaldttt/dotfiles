" If anything not work as expected. Please make sure all plugins
" are installed by running:
" :PlugInstall
"
" Content
" ('#' jump to the topic)
"
" Plugin_Install
" Plugin_Preferences
" Theme_Appearance
" Key_Mappings
" Useful_Info

" Environment {
    set nocompatible        " Must be first line
" }
    
" Plugin_Install
" {
    " Plugin environment
    let config_dir = '~/.dotfiles/'
    let plugin_dir = '~/.vim/plugged/'
    let g:vim_dir = '~/.vim/'

    call plug#begin(plugin_dir)

        " make sure to install nodejs to use coc.nvim
        if executable('node')
            Plug 'neoclide/coc.nvim', {'branch': 'release'}
        endif

        Plug 'rust-lang/rust.vim'

        " {
            Plug 'alvan/vim-closetag'
            let g:closetag_filenames = '*.html,*.xhtml,*.phtml, *.js'
        " }
        
        Plug 'scrooloose/nerdtree'

        " for markdown{
            Plug 'preservim/vim-markdown'
        "}
        
        " for window resize{
            Plug 'simeji/winresizer'
            let g:winresizer_start_key    = '<leader-r>'
            let g:winresizer_vert_resize  = 2
            let g:winresizer_horiz_resize = 2
        " }
        
        Plug 'tpope/vim-surround'
        Plug 'rhysd/conflict-marker.vim'

        Plug 'jiangmiao/auto-pairs'
        Plug 'mg979/vim-visual-multi'

        Plug 'easymotion/vim-easymotion'
        Plug 'vim-scripts/restore_view.vim'

        if executable('fzf')
            " fzf#install() makes sure that you have the latest binary, comment out because I don't want it to install binary for me
            Plug 'junegunn/fzf' ", { 'do': { -> fzf#install() } }
            Plug 'junegunn/fzf.vim'
            Plug 'antoinemadec/coc-fzf'
        endif

        Plug 'NLKNguyen/papercolor-theme'
        Plug 'airblade/vim-rooter'
        Plug 'mbbill/undotree'
        Plug 'tpope/vim-commentary'

        " put text in neibouring tmux pane into auto complete
        Plug 'wellle/tmux-complete.vim'
        Plug 'NoahTheDuke/vim-just'

        Plug 'ludovicchabant/vim-gutentags', { 'for': ['c', 'cpp'] }
        Plug 'lambdalisue/readablefold.vim'

        " only work with vim 
        if g:vim_type == 'vim'
            Plug 'vim-airline/vim-airline'
            Plug 'vim-airline/vim-airline-themes'
        endif

        " The bottom buffer display
        Plug 'bling/vim-bufferline'
        " only work with nvim > 0.5
        " For other versions, just loading the plugin may
        " cause error
        if g:vim_type == 'nvim'
            if g:vim_version >= 0.5
                Plug 'xiyaowong/nvim-transparent'
                Plug 'lukas-reineke/indent-blankline.nvim'
                " nvim theme
                Plug 'EdenEast/nightfox.nvim'
                Plug 'projekt0n/github-nvim-theme'

                Plug 'nvim-lualine/lualine.nvim'
                " If you want to have icons in your statusline choose one of these
                Plug 'kyazdani42/nvim-web-devicons'

                " partial code execution
                " Plug 'michaelb/sniprun', {'do': 'bash install.sh'}
            endif
            if g:vim_version >= 0.7
                Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
            endif
            if g:vim_version >= 0.8
                Plug 'nvim-tree/nvim-tree.lua'
            endif
        endif

    call plug#end()
" }

" Plugin_Preferences
" {
"
" nvim > 0.5 or above plugin {

if g:vim_type == 'nvim'
    if g:vim_version >= 0.5
    " xiyaowong/nvim-transparent {
    
    " }

    " lukas-reineke/indent-blankline.nvim {
        let g:indent_blankline_use_treesitter = v:true
        let g:indent_blankline_show_current_context = v:true
        "let g:indent_blankline_show_current_context_start = v:true
    " }
    
    endif

    if g:vim_version >= 0.7
    " nvim-treesitter/nvim-treesitter {
    
    if filereadable(expand(g:dotfile_path . '.vimrc.lua'))
        execute('source ' . g:dotfile_path . '/.vimrc.lua')
    endif
    
    " }
    endif
endif
" }

    " ludovicchabant/vim-gutentags {
        set statusline+=%{gutentags#statusline()}
        let g:gutentags_cache_dir=g:vim_dir . '/.vimtags/'
        let g:gutentags_project_root=['.git', '.hg', '.svn', '.bzr', '_darcs', '_FOSSIL_', '.fslckout', 'src']
    "}

    " easymotion/vim-easymotion {
    
        " <Leader>f{char} to move to {char}
        map  <Leader>f <Plug>(easymotion-bd-f)
        nmap <Leader>f <Plug>(easymotion-overwin-f)

        " s{char}{char} to move to {char}{char}
        nmap s <Plug>(easymotion-overwin-f2)

        " Move to line
        map <Leader>L <Plug>(easymotion-bd-jk)
        nmap <Leader>L <Plug>(easymotion-overwin-line)

        " Move to word
        map  <Leader>w <Plug>(easymotion-bd-w)
        nmap <Leader>w <Plug>(easymotion-overwin-w)

    " }

    " antoinemadec/coc-fzf {
    if isdirectory(expand(plugin_dir . "/coc-fzf"))
        nnoremap <silent> <space><space> :<C-u>CocFzfList<CR>
        nnoremap <leader>o       :<C-u>CocFzfList outline<CR>
    endif
    " }
    
    " bling/vim-bufferline {
        let g:bufferline_echo = 0
        let g:bufferline_modified = '+'

        " scrolling with fixed current buffer position
        let g:bufferline_rotate = 1

        let g:bufferline_active_buffer_left = ''
        let g:bufferline_active_buffer_right = ''
        let g:bufferline_fixed_index = -1 
    
    " }

    " mbbill/undotree {
        nnoremap <leader>ut :UndotreeToggle<CR>
    " }

    " airblade/vim-rooter {
    if isdirectory(expand(plugin_dir . "/vim-rooter"))
        let g:rooter_patterns = ['.vscode', '.git', '*.sln', 'src']
        let g:rooter_change_directory_for_non_project_files = 'current'
        let g:rooter_silent_chdir = 1
    endif
    " }
    
    " NerdTree {
        if g:vim_type == 'vim' && isdirectory(expand(plugin_dir . "/nerdtree"))
            let g:NERDShutUp=1

            " work around for nerdtree bug: https://github.com/preservim/nerdtree/issues/1321
            let g:NERDTreeMinimalMenu=1

            "nnoremap <C-e> :NERDTreeToggle<CR>
            nnoremap <leader>e :NERDTreeToggle<CR>
            "nmap <leader>e :NERDTreeFind<CR>

            "let NERDTreeShowBookmarks=1
            "let NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$']
            let NERDTreeChDirMode        = 0
            let NERDTreeQuitOnOpen       = 1
            let NERDTreeMouseMode        = 2
            let NERDTreeShowHidden       = 1
            let NERDTreeKeepTreeInNewTab = 1
        endif
    " }
    
    " nvim-tree.lua {
        if g:vim_type == 'nvim' && isdirectory(expand(plugin_dir . "/nvim-tree.lua"))


            nnoremap <leader>e :NvimTreeFindFileToggle<CR>
            nnoremap <leader>r :NvimTreeRefresh<CR>
            " nnoremap <leader>e :NvimTreeFindFile<CR>

        endif
    " }
     
    "if has('nvim') && str2float(g:nvim_version) >= 0.5 && isdirectory(expand(plugin_dir . "/lualine.nvim"))
    " nvim-lualine/lualine.nvim {
    " }
    "else
    " vim-airline {
        " Set configuration options for the statusline plugin vim-airline.
        " Use the powerline theme and optionally enable powerline symbols.
        let g:airline_section_b       = ''
        let g:airline_section_z       = ''
        let g:airline_section_y       = ''
        let g:airline_section_x       = ''
        let g:airline_section_warning = ''
        "let g:airline#extensions#tabline#left_sep = ''
        "let g:airline#extensions#tabline#left_alt_sep = '|'

        "let g:airline_left_sep='>'
        "let g:airline_right_sep='<'
        "let g:airline_skip_empty_sections = 1
        "let g:airline#extensions#bufferline#overwrite_variables = 0
        let g:airline_mode_map = {
            \ '__'     : '-',
            \ 'c'      : 'C',
            \ 'i'      : 'I',
            \ 'ic'     : 'I',
            \ 'ix'     : 'I',
            \ 'n'      : 'N',
            \ 'multi'  : 'M',
            \ 'ni'     : 'N',
            \ 'no'     : 'N',
            \ 'R'      : 'R',
            \ 'Rv'     : 'R',
            \ 's'      : 'S',
            \ 'S'      : 'S',
            \ ''     : 'S',
            \ 't'      : 'T',
            \ 'v'      : 'V',
            \ 'V'      : 'V',
            \ ''     : 'V',
            \ }
        if isdirectory(expand(plugin_dir . "/vim-airline-themes/"))
            "let g:airline_theme = 'solarized'
        endif
    " }
    "endif

    " junegunn/fzf {
        " [Buffers] Jump to the existing window if possible
        let g:fzf_buffers_jump = 1

        "let $FZF_DEFAULT_COMMAND='find . \( -name node_modules -o -name .git \) -prune -o -print'

        "   - Preview window on the right with 50% width
        "   - CTRL-/ will toggle preview window.
        let g:fzf_preview_window = ['right:50%', 'ctrl-/']


        " check if ripgrep is installed
        if ! executable('rg')
            command! -bang -nargs=* Rg
              \ call fzf#vim#grep(
              \   'grep -R --line-number --exclude-dir=".git;.svn" --color=always -- '.shellescape(<q-args>), 1,
              \   fzf#vim#with_preview(), <bang>0)
        endif
        noremap <leader><leader>r :Rg<CR>
        noremap <leader><leader>f :Files<CR>
    " }
    
    " neoclide/coc.nvim {
    if isdirectory(expand(plugin_dir . "/coc.nvim/")) && executable('node')
        " add desired extensions to the following global variable
        " coc-tsserver: javascript
        " coc-pyright: python
        " coc-clangd: c/c++, may need to install clangd seperatly
        let g:coc_global_extensions = ['coc-pyright', 'coc-rls', 'coc-clangd', 'coc-tsserver', 'coc-html', 'coc-cmake', 'coc-json', 'coc-sh']

        let g:coc_user_config = {
        \   'suggest.noselect': v:true,
        \   'suggest.enablePreselect': v:false }

        if filereadable(expand(config_dir . "/.exp-coc-config"))
            exec "source " . config_dir . "/.exp-coc-config"
        endif
    endif
    
    " }
" }

" Theme_Appearance
" {
"

    " debug function print out highlight group of cursor position
    function! SynStack()
      if !exists("*synstack")
        return
      endif
      echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
    endfunc

    nmap <Leader>db :call SynStack()<CR>

    " search and filter highlight group
    " :call Sh('airline')
    function! Sh(pattern)
        execute("filter /" . a:pattern . "/ highlight") 
    endfunc

    " dark or light
    if filereadable(expand(g:vim_dir . '.light_theme.signal'))
        let g:theme_color = 'light'              
    else
        let g:theme_color = 'dark'              
    endif

    " what to use for dark theme
    let g:dark_theme = 'default'               
    let g:airline_dark_theme = "deus"               

    " what to use for light theme
    let g:light_theme = 'default'              
    let g:airline_light_theme = "silver"               

    " transparent backgroud for supported terminal emulator
    " check if transparent_dark_theme.signl or transparent_light_theme.signl
    " exist and set respect variable
    let g:transparent_dark_theme = v:false     
    let g:transparent_light_theme = v:false     
    if filereadable(expand(g:vim_dir . '.transparent_dark_theme.signal'))
        let g:transparent_dark_theme = v:true     
    endif
    if filereadable(expand(g:vim_dir . '.transparent_light_theme.signal'))
        let g:transparent_light_theme = v:true     
    endif

    function! SetDarkTheme()
        set background=dark
        hi clear
        execute("colorscheme " . g:dark_theme)
        let g:theme_color = 'dark'
    endfunction

    function! SetLightTheme()
        set background=light
        hi clear
        execute("colorscheme " . g:light_theme)
        let g:theme_color = 'light'
    endfunction

    " Change bottom airline/lualine theme
    " Currently only support airline
    function! SetAirlineTheme(theme)
        if has('nvim') && g:vim_version >= 0.5
            execute('AirlineTheme ' . a:theme)
        else
            execute('AirlineTheme ' . a:theme)
        endif
    endfunction

    " Fix colorscheme not working correctly under transparent background
    " There is no plugin for this for nvim < 0.5 or vim without lua support
    function! TransparentBackgroundFix()
        "if !has('nvim') || g:vim_version < 0.5
        if v:true
            highlight SignColumn ctermbg=none
            "highlight CursorLineNr ctermbg=none
            highlight CocWarningHighlight ctermbg=none
            highlight CocErrorSign ctermbg=none ctermfg=9 cterm=bold
            highlight CocErrorHighlight ctermbg=none ctermfg=9 cterm=underline,bold
            highlight CocInfoHighlight ctermbg=none
            highlight CocHintHighlight ctermbg=none
            highlight CocWarningSign ctermbg=none
            highlight CocInfoSign    ctermbg=none
            highlight CocHintSign    ctermbg=none
            if g:theme_color == 'dark'
                highlight! link TempColor Visual
                highlight! link CocFloating     TempColor
                highlight! link CocErrorFloat   TempColor
                highlight! link CocWarningFloat TempColor
                highlight! link CocInfoFloat    TempColor
                highlight! link CocHintFloat    TempColor
            endif
        endif
    endfunction

    function! EnableTransparent()
        if g:vim_type == 'nvim' && g:vim_version > 0.5
            :TransparentEnable
        elseif g:theme_color == 'dark'
            let g:PaperColor_Theme_Options = {
            \   'theme': {
            \       'default.dark': {
            \           'transparent_background': 1
            \        }
            \   }
            \ }
            execute("colorscheme " . g:dark_theme)
        elseif g:theme_color == 'light'
            let g:PaperColor_Theme_Options = {
            \   'theme': {
            \       'default.light': {
            \           'transparent_background': 1
            \        }
            \   }
            \ }
            execute("colorscheme " . g:light_theme)
        endif
    endfunction

    function! DisableTransparent()
        if g:vim_type == 'nvim' && g:vim_version > 0.5
            :TransparentDisable
        elseif g:theme_color == 'dark'
            let g:PaperColor_Theme_Options = {
            \   'theme': {
            \       'default.dark': {
            \           'transparent_background': 0
            \        }
            \   }
            \ }
            execute("colorscheme " . g:dark_theme)
        elseif g:theme_color == 'light'
            let g:PaperColor_Theme_Options = {
            \   'theme': {
            \       'default.light': {
            \           'transparent_background': 0
            \        }
            \   }
            \ }
            execute("colorscheme " . g:light_theme)
        endif
    endfunction

    " delete signal file if exist
    function! DeleteSignalFile(name)
        if filereadable(expand(g:vim_dir . a:name))
            call delete(expand(g:vim_dir . a:name))
        endif
    endfunction
    
    " Create signal file if not exist
    function! CreateSignalFile(name)
        call system("touch " . g:vim_dir . a:name)
    endfunction

    " ToggleTransparent background
    " only works in dark theme
    function! ToggleTransparent()
        if g:transparent_dark_theme && g:theme_color == 'dark'
            call DisableTransparent()
            let g:transparent_dark_theme = v:false     
            call DeleteSignalFile('.transparent_dark_theme.signal')
        elseif g:transparent_light_theme && g:theme_color == 'light'
            call DisableTransparent()
            let g:transparent_light_theme = v:false     
            call DeleteSignalFile('.transparent_light_theme.signal')
        else
            call EnableTransparent()
            if g:theme_color == 'dark'
                let g:transparent_dark_theme = v:true     
                call CreateSignalFile('.transparent_dark_theme.signal')
            else
                let g:transparent_light_theme = v:true     
                call CreateSignalFile('.transparent_light_theme.signal')
            endif
        endif
        call TransparentBackgroundFix()
    endfunction


    " vim theme 
        if isdirectory(expand(plugin_dir . "/papercolor-theme")) 
            " improve coc color in this theme
            let g:light_theme = 'PaperColor'              
            let g:dark_theme = 'PaperColor'
        endif

        " nvim only theme
        if isdirectory(expand(plugin_dir . "/nightfox.nvim")) && isdirectory(expand(plugin_dir . "/github-nvim-theme")) && has('nvim') && g:vim_version >= 0.5
            let g:light_theme = 'dawnfox'
            "let g:dark_theme = 'nightfox'
            let g:dark_theme = 'github_dark'
            let g:airline_dark_theme = "hybrid"               
        endif
   
   
    if g:theme_color == 'dark'
        let g:airline_theme=g:airline_dark_theme
        call SetDarkTheme()
    else
        let g:airline_theme=g:airline_light_theme
        call SetLightTheme()
    endif

    " Since in .vimrc we cannot call plugin function as they
    " are not loaded (:help startup)
    if g:transparent_dark_theme && g:theme_color == 'dark' || g:transparent_light_theme && g:theme_color == 'light'
        if g:vim_type == 'nvim' && g:vim_version > 0.5
            let g:transparent_enabled = v:true
        else
            call EnableTransparent()
        endif
    else 
        if g:vim_type == 'nvim' && g:vim_version > 0.5
            let g:transparent_enabled = v:false
        else
            call DisableTransparent()
        endif
    endif
        
    call TransparentBackgroundFix()
    " Allow to trigger background
    function! ToggleBG()
        " Inversion
        if g:theme_color == "dark"
            call SetLightTheme()
            call SetAirlineTheme(g:airline_light_theme)
            call CreateSignalFile('.light_theme.signal') 
        else
            call SetDarkTheme()
            call SetAirlineTheme(g:airline_dark_theme)
            " for saving theme state
            call DeleteSignalFile(".light_theme.signal")
        endif

        if g:transparent_dark_theme && g:theme_color == 'dark' || g:transparent_light_theme && g:theme_color == 'light'
            call EnableTransparent()
        else
            call DisableTransparent()
        endif
        call TransparentBackgroundFix()
    endfunction

" }

" Key_Mappings
" (This doesn't include plugin specific mapping.
" For them please check plugin Preferences)
" {

    " Toggle dark/light theme
    noremap <leader>bg :call ToggleBG()<CR>

    " Toggle transparent background
    noremap <leader>tb :call ToggleTransparent()<CR>

    " Buffer navigation
    nnoremap <space>q :bprevious<CR>
    nnoremap <space>e :bnext<CR>

    " leader s change all occurence
    nnoremap <Leader>s :%s/\<<C-r><C-w>\>/

    " leader num change tab
    nnoremap <Leader>1 :b1<CR>
    nnoremap <Leader>2 :b2<CR>
    nnoremap <Leader>3 :b3<CR>
    nnoremap <Leader>4 :b4<CR>
    nnoremap <Leader>5 :b5<CR>
    nnoremap <Leader>6 :b6<CR>
    nnoremap <Leader>7 :b7<CR>
    nnoremap <Leader>8 :b8<CR>
    nnoremap <Leader>9 :b9<CR>

    " split window comform with other window management shortcuts
    nnoremap <C-w>% :vsplit<CR>
    nnoremap <C-w>" :split<CR>
" }
"
" Useful_Info{
"   show mapping info
"   :verbose map ,cf
" }
